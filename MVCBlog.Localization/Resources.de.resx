<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Author" xml:space="preserve">
    <value>Autor</value>
  </data>
  <data name="Comment" xml:space="preserve">
    <value>Kommentar</value>
  </data>
  <data name="Content" xml:space="preserve">
    <value>Inhalt</value>
  </data>
  <data name="CreatedOn" xml:space="preserve">
    <value>Erstellt am</value>
  </data>
  <data name="Email" xml:space="preserve">
    <value>E-Mail (optional, wird für Gravatar verwendet)</value>
  </data>
  <data name="Header" xml:space="preserve">
    <value>Titel</value>
  </data>
  <data name="Homepage" xml:space="preserve">
    <value>Homepage</value>
  </data>
  <data name="Id" xml:space="preserve">
    <value>Id</value>
  </data>
  <data name="IdentityErrorDefaultError" xml:space="preserve">
    <value>Unbekannter Fehler.</value>
  </data>
  <data name="IdentityErrorDuplicateEmail" xml:space="preserve">
    <value>Die E-Mail "{0}" wird bereits verwendet.</value>
  </data>
  <data name="IdentityErrorDuplicateRoleName" xml:space="preserve">
    <value>Rolle '{0}' wird bereits verwendet.</value>
  </data>
  <data name="IdentityErrorDuplicateUserName" xml:space="preserve">
    <value>Der Benutzername "{0}" wird bereits verwendet.</value>
  </data>
  <data name="IdentityErrorInvalidEmail" xml:space="preserve">
    <value>Die E-Mail "{0}" ist ungültig.</value>
  </data>
  <data name="IdentityErrorInvalidRoleName" xml:space="preserve">
    <value>Rolle '{0}' ist ungültig.</value>
  </data>
  <data name="IdentityErrorInvalidToken" xml:space="preserve">
    <value>Ungültiges Token.</value>
  </data>
  <data name="IdentityErrorInvalidUserName" xml:space="preserve">
    <value>Der Benutzername "{0}" ist ungültig. Er darf nur Buchstaben und Ziffern enthalten.</value>
  </data>
  <data name="IdentityErrorLoginAlreadyAssociated" xml:space="preserve">
    <value>Ein Benutzer mit diesem Benutzernamen existiert bereits.</value>
  </data>
  <data name="IdentityErrorPasswordMismatch" xml:space="preserve">
    <value>Falsches Kennwort.</value>
  </data>
  <data name="IdentityErrorPasswordRequiresDigit" xml:space="preserve">
    <value>Kennwörter müssen mindestens eine Zahl ("0" - "9") enthalten.</value>
  </data>
  <data name="IdentityErrorPasswordRequiresLower" xml:space="preserve">
    <value>Kennwörter müssen mindestens einen Großbuchstaben ("A" - "Z") enthalten.</value>
  </data>
  <data name="IdentityErrorPasswordRequiresNonAlphanumeric" xml:space="preserve">
    <value>Kennwörter müssen mindestens ein Zeichen enthalten, das kein Buchstabe und keine Zahl ist.</value>
  </data>
  <data name="IdentityErrorPasswordRequiresUpper" xml:space="preserve">
    <value>Kennwörter müssen mindestens einen Kleinbuchstaben ("a" - "z") enthalten.</value>
  </data>
  <data name="IdentityErrorPasswordTooShort" xml:space="preserve">
    <value>Kennwörter müssen mindestens {0} Zeichen lang sein.</value>
  </data>
  <data name="IdentityErrorUserAlreadyHasPassword" xml:space="preserve">
    <value>Für den Benutzer ist bereits ein Kennwort festgelegt.</value>
  </data>
  <data name="IdentityErrorUserAlreadyInRole" xml:space="preserve">
    <value>Der Benutzer ist bereits Mitglied der Rolle "{0}".</value>
  </data>
  <data name="IdentityErrorUserLockoutNotEnabled" xml:space="preserve">
    <value>Lockout ist für diesen Benuter nicht aktiviert.</value>
  </data>
  <data name="IdentityErrorUserNotInRole" xml:space="preserve">
    <value>Der Benutzer ist nicht in der Rolle "{0}" enthalten.</value>
  </data>
  <data name="PublishDate" xml:space="preserve">
    <value>Veröffentlichungsdatum</value>
  </data>
  <data name="ShortContent" xml:space="preserve">
    <value>Kurzer Inhalt (wird auf Startseite angezeigt)</value>
  </data>
  <data name="Validation_MaxLength" xml:space="preserve">
    <value>"{0}" hat eine maximale Länge von {1}.</value>
  </data>
  <data name="Validation_MaxMinLength" xml:space="preserve">
    <value>"{0}" muss mindestens {2} und höchstens {1} Zeichen lang sein.</value>
  </data>
  <data name="Validation_Required" xml:space="preserve">
    <value>"{0}" ist ein Pflichtfeld.</value>
  </data>
  <data name="Visible" xml:space="preserve">
    <value>Öffentlich sichtbar</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="LastName" xml:space="preserve">
    <value>Nachname</value>
  </data>
  <data name="FirstName" xml:space="preserve">
    <value>Vorname</value>
  </data>
  <data name="Visits" xml:space="preserve">
    <value>Besucher</value>
  </data>
  <data name="Counter" xml:space="preserve">
    <value>Downloads</value>
  </data>
  <data name="UpdateDate" xml:space="preserve">
    <value>Zuletzt aktualisiert</value>
  </data>
  <data name="SavedSuccessfully" xml:space="preserve">
    <value>Erfolgreich gespeichert</value>
  </data>
  <data name="DeletedSuccessfully" xml:space="preserve">
    <value>Erfolgreich gelöscht</value>
  </data>
  <data name="PermalinkInUse" xml:space="preserve">
    <value>Permalink '{0}' wird bereits verwendet</value>
  </data>
</root>